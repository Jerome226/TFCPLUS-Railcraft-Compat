buildscript {
	repositories {
		mavenCentral()
		maven {
            		name = "juanmuscaria"
            		url = "https://github.com/juanmuscaria/maven/raw/master"
        	}
        	maven {
            		name = "sonatype"
            		url = "https://oss.sonatype.org/content/repositories/snapshots/"
        	}
           }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:[1.2-1.4.5-SNAPSHOT,)'
    }
}

apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'idea'

version = "0.3.0"
group="com.vidaj.tfcrailcraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "tfc+railcraftcompat"

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
    replace "@VERSION@", version
    //accessTransformer(file("src/main/resources/META-INF/access_transformer.cfg"))
}


jar {
    manifest.attributes(
            'FMLCorePlugin': 'com.vidaj.tfcrailcraft.asm.TransformerManager',
            'FMLCorePluginContainsFMLMod': 'true',
    )
}

repositories {
    mavenCentral()
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name "waila"
        url "http://mobiusstrip.eu/maven"
    }

}

dependencies {
    runtimeOnly fileTree(dir: 'libs', include: ['*.jar'])
    compile 'codechicken:NotEnoughItems:1.7.10-1.0.5.118:dev'
    compile 'codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev'
    compile 'codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev'

    compile module("mcp.mobius.waila:Waila:1.5.10_1.7.10") {
        transitive = false // WAILA is depending on an invalid combination of CCC/NEI that doesn't run...
    }
}


processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': version,
                'mod_id': project.mod_id,
                'mod_name': project.mod_name,
                'mod_author': project.mod_author,
                'mod_description': project.mod_description,
                'mc_version': project.mc_version,
                'mod_version': project.mod_version,
                'mod_credits': project.mod_credits
    }

    // copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task devJar(type: Jar) {
    archiveClassifier.set('dev')
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

jar {
    appendix project.minecraft.version
}

artifacts {
    archives devJar
    archives sourcesJar
}